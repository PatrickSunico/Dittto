-# Post Show route

= link_to "Back", root_path

%h1= @post.title
= cl_image_tag(@post.thumbnail.url(:medium).to_s)
%p= @post.description
%p
Created by:
= "#{@post.user.first_name} #{@post.user.last_name}"

-# User Menu
-# if current user owns this post show post actions
-# Make actions as dropdown list
#actions

- if @post.user == current_user
  = link_to "Edit", edit_post_path(@post)
  = link_to "Add Attachments", new_post_attachment_path(@post)


-# Renders a modal form

-# Attachments
-# if current user owns this post and the attachments show attachment actions
#attachments
  - @attachments.each do |attachment|
    = image_tag attachment.image.url(:medium).to_s
    - if @post.user == current_user
      - puts "@post.user.id =", @post.user.id
      - puts "current_user.id =", current_user.id
      - if @post.id == attachment.post_id
        = link_to "Delete", [attachment.post, attachment], method: :delete, data: {confirm: "Are You sure, You want to delete this Attachment?" }
-# Likes
%p
= @post.get_upvotes.size
Likes
%p
= @post.get_downvotes.size
Dislikes

-# Like/Dislike Post if current_user signed in
- if current_user
  = link_to "Like", like_post_path(@post), method: :get
  = link_to "Dislike", dislike_post_path(@post), method: :get

  -# End Likes

-# Comments
-# Create Comment if current_user
-# make comments as ajax
#comment
  %h2.comment_count= pluralize(@post.comments.count, "Comment")
  - @comments.each do |comment|
    .comment
      %p.username= "#{@post.user.first_name} #{@post.user.last_name}"
      %p.content= comment.content

      - if comment.user == current_user
        -# Delete Comment if comment belongs to that specific user
        = link_to "Delete Comment", post_comment_path(comment), method: :delete, data: {confirm: "Delete Comment?"}

  - if current_user
    = render 'comments/form', post: @post
  -# End Comments
